library(lubridate)
current_month <- month(Sys.Date())
library('httr')
library('XML')
library('raster')
library(RPostgreSQL)
library(rgdal)
library(lubridate)
processDir <- paste(getwd(),"/Desktop/clima3/procesamiento/",sep="")
desviacionesDir <- paste(getwd(),"/Desktop/clima3/productos/DESVIACIONES_CHIRPS_PROMEDIO/",sep="")
procesar <- c('m1_mes1','m1_mes2','m1_mes3','m2_mes1','m3_mes1','m4_mes1')
i <- 1
download.file(url = "", destfile = paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
urlsalidas <- "http://centroclima.org/samre3/salidas/"
i <- 1
download.file(url = paste(urlsalidas,procesar[i],"/acum_general.tif",sep=""), destfile = paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
current_month <- month(Sys.Date())
avgdev_month <- current_month + 1
if(i==2)
{
avgdev_month <- current_month + 2
}
if(i==3)
{
avgdev_month <- current_month + 3
}
process_month <- paste("0",as.character(avgdev_month),sep="")
process_month <- substr(process_month, nchar(process_month)-1, nchar(process_month))
lluvia_acumulada <- raster(paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
raster_desviacion_promedio <- raster(paste(desviacionesDir,process_month,".tif",sep=""))
lluvia_acumulada
raster_desviacion_promedio
library('httr')
library('XML')
library('raster')
library(RPostgreSQL)
library(rgdal)
library(lubridate)
processDir <- paste(getwd(),"/Desktop/clima3/procesamiento/",sep="")
desviacionesDir <- paste(getwd(),"/Desktop/clima3/productos/DESVIACIONES_CHIRPS_PROMEDIO/",sep="")
procesar <- c('m1_mes1','m1_mes2','m1_mes3','m2_mes1','m3_mes1','m4_mes1')
urlsalidas <- "http://centroclima.org/samre3/salidas/"
i <- 1
download.file(url = paste(urlsalidas,procesar[i],"/acum_general.tif",sep=""), destfile = paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
current_month <- month(Sys.Date())
avgdev_month <- current_month + 1
if(i==2)
{
avgdev_month <- current_month + 2
}
if(i==3)
{
avgdev_month <- current_month + 3
}
process_month <- paste("0",as.character(avgdev_month),sep="")
process_month <- substr(process_month, nchar(process_month)-1, nchar(process_month))
lluvia_acumulada <- raster(paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
crs(lluvia_acumulada) <- "+proj=longlat +datum=WGS84 +pm=360dw"
lluvia_acumulada <- projectRaster(lluvia_acumulada, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
lluvia_acumulada
raster_desviacion_promedio <- raster(paste(desviacionesDir,process_month,".tif",sep=""))
lluvia_acumulada <- crop(lluvia_acumulada,extent(raster_desviacion_promedio))
raster_desviacion_promedio
raster_desviacion_promedio <- raster(paste(desviacionesDir,process_month,".tif",sep=""))
crs(raster_desviacion_promedio) <- "+proj=longlat +datum=WGS84 +pm=360dw"
raster_desviacion_promedio <- projectRaster(raster_desviacion_promedio, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
lluvia_acumulada <- crop(lluvia_acumulada,extent(raster_desviacion_promedio))
lluvia_acumulada <- mask(lluvia_acumulada,raster_desviacion_promedio)
lluvia_acumulada
raster_desviacion_promedio
plot(lluvia_acumulada)
plot(raster_desviacion_promedio,add=TRUE)
plot(lluvia_acumulada)
plot(raster_desviacion_promedio,add=TRUE)
library('httr')
library('XML')
library('raster')
library(RPostgreSQL)
library(rgdal)
library(lubridate)
processDir <- paste(getwd(),"/Desktop/clima3/procesamiento/",sep="")
desviacionesDir <- paste(getwd(),"/Desktop/clima3/productos/DESVIACIONES_CHIRPS_PROMEDIO/",sep="")
procesar <- c('m1_mes1','m1_mes2','m1_mes3','m2_mes1','m3_mes1','m4_mes1')
urlsalidas <- "http://centroclima.org/samre3/salidas/"
i <- 1
download.file(url = paste(urlsalidas,procesar[i],"/acum_general.tif",sep=""), destfile = paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
current_month <- month(Sys.Date())
avgdev_month <- current_month + 1
if(i==2)
{
avgdev_month <- current_month + 2
}
if(i==3)
{
avgdev_month <- current_month + 3
}
process_month <- paste("0",as.character(avgdev_month),sep="")
process_month <- substr(process_month, nchar(process_month)-1, nchar(process_month))
lluvia_acumulada <- raster(paste(processDir,procesar[i],"_","acumulado_general.tif",sep=""))
crs(lluvia_acumulada) <- "+proj=longlat +datum=WGS84 +pm=360dw"
lluvia_acumulada <- projectRaster(lluvia_acumulada, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
raster_desviacion_promedio <- raster(paste(desviacionesDir,process_month,".tif",sep=""))
crs(raster_desviacion_promedio) <- "+proj=longlat +datum=WGS84 +pm=360dw"
raster_desviacion_promedio <- projectRaster(raster_desviacion_promedio, crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
lluvia_acumulada
raster_desviacion_promedio
plot(lluvia_acumulada)
plot(raster_desviacion_promedio,add=TRUE)
lluvia_acumulada <- mask(lluvia_acumulada,raster_desviacion_promedio)
lluvia_acumulada <- resample(lluvia_acumulada,raster_desviacion_promedio,method='bilinear')
lluvia_acumulada
plot(lluvia_acumulada)
plot(raster_desviacion_promedio,add=TRUE)
lluvia_acumulada <- mask(lluvia_acumulada,raster_desviacion_promedio)
plot(lluvia_acumulada)
plot(raster_desviacion_promedio)
r <- if(TRUE) 1 else 2
r
raster_normalizado <- if(raster_desviacion_promedio>0) (lluvia_acumulada - raster_desviacion_promedio) else (lluvia_acumulada + raster_desviacion_promedio)
raster_desviacion_promedio > 0
rs <- lluvia_acumulada - raster_desviacion_promedio[raster_desviacion_promedio > 0]
rs <- lluvia_acumulada - raster_desviacion_promedio > 0
rs
plot(rs)
id_positivos <- raster_desviacion_promedio > 0
id_negativos <- raster_desviacion_promedio < 0
plot(id_positivos)
plot(id_negativos)
lluvia_acumulada_ajustado <- lluvia_acumulada
lluvia_acumulada_ajustado <- lluvia_acumulada[id_positivos] - raster_desviacion_promedio[id_positivos]
lluvia_acumulada_ajustado <- lluvia_acumulada[id_negativos] + raster_desviacion_promedio[id_negativos]
plot(lluvia_acumulada_ajustado)
lluvia_acumulada_ajustado
rs <- raster(lluvia_acumulada_ajustado)
lluvia_acumulada_ajustado <- ifelse(raster_desviacion_promedio>o,lluvia_acumulada - raster_desviacion_promedio, lluvia_acumulada + raster_desviacion_promedio)
lluvia_acumulada_ajustado <- ifelse(raster_desviacion_promedio>0,lluvia_acumulada - raster_desviacion_promedio, lluvia_acumulada + raster_desviacion_promedio)
lluvia_acumulada_ajustado <- lluvia_acumulada
lluvia_acumulada_ajustado[raster_desviacion_promedio>0] = lluvia_acumulada - raster_desviacion_promedio
lluvia_acumulada_ajustado[raster_desviacion_promedio>0] = lluvia_acumulada[raster_desviacion_promedio>0] - raster_desviacion_promedio[raster_desviacion_promedio>0]
lluvia_acumulada_ajustado
plot(lluvia_acumulada_ajustado)
lluvia_acumulada_ajustado[!raster_desviacion_promedio>0] = lluvia_acumulada[!raster_desviacion_promedio>0] + raster_desviacion_promedio[!raster_desviacion_promedio>0]
plot(lluvia_acumulada_ajustado)
lluvia_acumulada_ajustado
lluvia_acumulada_ajustado[lluvia_acumulada_ajustado<0]=lluvia_acumulada[lluvia_acumulada_ajustado<0]
lluvia_acumulada_ajustado
plot(lluvia_acumulada_ajustado)
plot(lluvia_acumulada_ajustado)
writeFormats()
writeRaster(lluvia_acumulada_ajustado,paste(processDir,procesar[i],'_acu_gen_norm.tif',sep=""),'GTiff')
urlgeoserver <- "http://localhost:9002/geoserver/rest"
processDir <- paste(getwd(),"/Desktop/clima3/procesamiento/",sep="")
desviacionesDir <- paste(getwd(),"/Desktop/clima3/productos/DESVIACIONES_CHIRPS_PROMEDIO/",sep="")
procesar <- c('m1_mes1','m1_mes2','m1_mes3','m2_mes1','m3_mes1','m4_mes1')
urlsalidas <- "http://centroclima.org/samre3/salidas/"
workspace <- "c3pronostico"
# delete workspace
responseGetWorkspace <- GET(url=paste(urlgeoserver,'/workspaces',sep=""),authenticate('admin','gis$developer'),content_type_json())
responseGetWorkspace
View(responseGetWorkspace)
responseGetWorkspace[["content"]]
str(content(responseGetWorkspace))
content(responseGetWorkspace)
responseGetWorkspace
responseGetWorkspace$content
responseGetWorkspace$content
str(responseGetWorkspace$content)
content(responseGetWorkspace$content)
content(responseGetWorkspace)
c <- content(responseGetWorkspace)
c
c$workspaces$workspace
summary(c$workspaces$workspace)
content(responseGetWorkspace,"text")
source('~/Desktop/clima3/PublicarBase.R')
source('~/Desktop/clima3/PublicarBase.R')
install.packages("shinydashboard")
install.packages("shinydashboardPlus")
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
install.packages("leaflet")
?dashboardHeader
runApp('Desktop/Hidroclima/dashboard_bdcac')
?icon
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?dashboardSidebar
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?dashboardHeader
runApp('Desktop/Hidroclima/dashboard_bdcac')
?titlePanel
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?dashboardPage
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
install.packages("shiny")
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?selectizeInput
runApp('Desktop/Hidroclima/dashboard_bdcac')
?leafletOptions
zoomControl
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?actionButton
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
aes
install.packages("ggplot2")
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
movies
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
View(responseDeleteWorkspace)
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
?updateCheckboxInput
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
install.packages("DT")
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
detach("package:DT", unload=TRUE)
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
shiny::runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
?wellPanel
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
runApp('Desktop/Hidroclima/dashboard_bdcac')
library(RPostgreSQL)
library(postGIStools)
setwd('/Users/emartinez/Desktop/Hidroclima/dashboard_bdcac/')
con <- dbConnect(PostgreSQL(), dbname = "bdcac", user = "desarrollador",
host = "localhost", port = "9003",
password = "desbdcac")
# ESTACIONES
estaciones <- dbGetQuery(con,"select a.*, b.* from bdcac.estacion a inner join bdcac.institucion b on a.estinstitucion = b.inscodigo
where a.estcodigobdcac in (select distinct diaestacion from bdcac.datodia where diaestacion !=11111111) and b.inscodigo != 1
order by b.inspais, a.estcodigobdcac")
saveRDS(estaciones, file = "data/estaciones.rds")
estacionesWeb <- estaciones
saveRDS(estacionesWeb, file = "data/estacionesWeb.rds")
# VARIABLES ESTACIONES
variables_estaciones <- dbGetQuery(con,"SELECT a.*, b.vreestacion from bdcac.variable a inner join bdcac.variableestacion b on
a.varcodigo = b.vrevariable order by b.vreestacion, a.varcodigo;")
saveRDS(variables_estaciones,'data/variables_estaciones.rds')
# LLUVIA TOTAL ANUAL POR ESTACION
lluvia_anual_estacion <- dbGetQuery(con,"select
b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha), sum(a.diavalor), count(*)
from
bdcac.datodia a
inner join bdcac.estacion b on a.diaestacion = b.estcodigobdcac
inner join bdcac.institucion c on b.estinstitucion = c.inscodigo
where a.diavariable = 4 and a.diavalor >= 0 and a.diafecha > '1900-01-01 00:00'
group by b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha)
order by c.inspais, b.estnombre, a.diavariable")
saveRDS(lluvia_anual_estacion,'data/lluvia_anual_estacion.rds')
# TOTALES MENSUALES
totales_mensuales <- dbGetQuery(con,"select b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha),
sum(case when date_part('month',a.diafecha) = 1 then a.diavalor else 0 end) as ene,
sum(case when date_part('month',a.diafecha) = 1 then 1 else 0 end) as days_ene,
sum(case when date_part('month',a.diafecha) = 2 then a.diavalor else 0 end) as feb,
sum(case when date_part('month',a.diafecha) = 2 then 1 else 0 end) as days_feb,
sum(case when date_part('month',a.diafecha) = 3 then a.diavalor else 0 end) as mar,
sum(case when date_part('month',a.diafecha) = 3 then 1 else 0 end) as days_mar,
sum(case when date_part('month',a.diafecha) = 4 then a.diavalor else 0 end) as abr,
sum(case when date_part('month',a.diafecha) = 4 then 1 else 0 end) as days_abr,
sum(case when date_part('month',a.diafecha) = 5 then a.diavalor else 0 end) as may,
sum(case when date_part('month',a.diafecha) = 5 then 1 else 0 end) as days_may,
sum(case when date_part('month',a.diafecha) = 6 then a.diavalor else 0 end) as jun,
sum(case when date_part('month',a.diafecha) = 6 then 1 else 0 end) as days_jun,
sum(case when date_part('month',a.diafecha) = 7 then a.diavalor else 0 end) as jul,
sum(case when date_part('month',a.diafecha) = 7 then 1 else 0 end) as days_jul,
sum(case when date_part('month',a.diafecha) = 8 then a.diavalor else 0 end) as ago,
sum(case when date_part('month',a.diafecha) = 8 then 1 else 0 end) as days_ago,
sum(case when date_part('month',a.diafecha) = 9 then a.diavalor else 0 end) as sep,
sum(case when date_part('month',a.diafecha) = 9 then 1 else 0 end) as days_sep,
sum(case when date_part('month',a.diafecha) = 10 then a.diavalor else 0 end) as oct,
sum(case when date_part('month',a.diafecha) = 10 then 1 else 0 end) as days_oct,
sum(case when date_part('month',a.diafecha) = 11 then a.diavalor else 0 end) as nov,
sum(case when date_part('month',a.diafecha) = 11 then 1 else 0 end) as days_nov,
sum(case when date_part('month',a.diafecha) = 9 then a.diavalor else 0 end) as dic,
sum(case when date_part('month',a.diafecha) = 9 then 1 else 0 end) as days_dic
from bdcac.datodia a inner join bdcac.estacion b on a.diaestacion = b.estcodigobdcac
inner join bdcac.institucion c on b.estinstitucion = c.inscodigo
where a.diavariable = 4 and a.diavalor >= 0 and a.diafecha > '1900-01-01 00:00'
group by b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha)
order by c.inspais, b.estnombre, a.diavariable, date_part('year',a.diafecha)")
saveRDS(totales_mensuales,'data/totales_mensuales.rds')
# TOTALES MENSUALES LONG
totales_mensuales_long <- dbGetQuery(con,"select
b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha) as year, date_part('month',a.diafecha) as month,
sum(a.diavalor) as total,
sum(1) as dias
from
bdcac.datodia a
inner join bdcac.estacion b on a.diaestacion = b.estcodigobdcac
inner join bdcac.institucion c on b.estinstitucion = c.inscodigo
where a.diavariable = 4 and a.diavalor >= 0 and a.diafecha > '1900-01-01 00:00'
group by b.estcodigobdcac, b.estnombre, c.inspais, a.diavariable, date_part('year',a.diafecha), date_part('month',a.diafecha)
order by c.inspais, b.estnombre, a.diavariable, date_part('year',a.diafecha), date_part('month',a.diafecha)")
saveRDS(totales_mensuales_long,'data/totales_mensuales_long.rds')
library(dplyr)
setwd('/Users/emartinez/Desktop/Hidroclima/dashboard_bdcac')
estaciones <- unique(totales_mensuales$estnombre)
totales_mensuales <- readRDS('data/totales_mensuales.rds')
periodos_perspectiva <- data.frame(estnombre = character(nrow(totales_mensuales)+1), yyyy=character(nrow(totales_mensuales)+1), mjj = numeric(nrow(totales_mensuales)+1),
aso = numeric(nrow(totales_mensuales)+1), defm = numeric(nrow(totales_mensuales)+1), stringsAsFactors = FALSE)
k <- 1
for(i in 1:length(estaciones)) {
totales_mensuales_estacion <- totales_mensuales %>% filter(estnombre==estaciones[i])
if(nrow(totales_mensuales_estacion)>0){
for(j in 1:nrow(totales_mensuales_estacion))
{
estnombre <- totales_mensuales_estacion$estnombre[j]
if(totales_mensuales_estacion$days_may[j] >= 20 &
totales_mensuales_estacion$days_jun[j] >= 20 &
totales_mensuales_estacion$days_jul[j] >= 20)
{
mjj <- totales_mensuales_estacion$may[j] + totales_mensuales_estacion$jun[j] + totales_mensuales_estacion$jul[j]
} else {
mjj <- NA
}
if(totales_mensuales_estacion$days_ago[j] >= 20 &
totales_mensuales_estacion$days_sep[j] >= 20 &
totales_mensuales_estacion$days_oct[j] >= 20)
{
aso <- totales_mensuales_estacion$ago[j] + totales_mensuales_estacion$sep[j] + totales_mensuales_estacion$oct[j]
} else {
aso <- NA
}
defm <- NULL
yyyy <- totales_mensuales_estacion$date_part[j]
if(!is.na(totales_mensuales_estacion$date_part[j+1]))
{
yyyy2 <- totales_mensuales_estacion$date_part[j+1]
if(yyyy2-yyyy==1) {
if(totales_mensuales_estacion$days_dic[j] >= 20 &
totales_mensuales_estacion$days_ene[j + 1] >= 17 &
totales_mensuales_estacion$days_feb[j + 1] >= 20 &
totales_mensuales_estacion$days_mar[j + 1] >= 20)
{
defm <- totales_mensuales_estacion$dic[j] + totales_mensuales_estacion$ene[j+1] +
totales_mensuales_estacion$feb[j+1] + totales_mensuales_estacion$mar[j+1]
} else {
defm <- NA
}
}
}
periodos_perspectiva$estnombre[k] <- estnombre
periodos_perspectiva$yyyy[k] <- yyyy
periodos_perspectiva$mjj[k] <- mjj
periodos_perspectiva$aso[k] <- aso
if(!is.null(defm))
periodos_perspectiva$defm[k] <- defm
else
periodos_perspectiva$defm[k] <- NA
k <- k + 1
}
}
}
saveRDS(periodos_perspectiva,'data/periodos_perspectiva.rds')
library(RPostgreSQL)
library(dplyr)
setwd('/Users/emartinez/Desktop/Hidroclima/dashboard_bdcac/')
con <- dbConnect(PostgreSQL(), dbname = "bdcac", user = "desarrollador",
host = "localhost", port = "9003",
password = "desbdcac")
sql <- "select b.estcodigobdcac, b.estnombre, a.*, date_part('year',a.diafecha) as yyyy from bdcac.datodia a inner join bdcac.estacion b on a.diaestacion = b.estcodigobdcac
where a.diavariable = 4 and a.diavalor >= 0 and a.diafecha > '1900-01-01 00:00'
order by a.diafecha, a.diaestacion, a.diavariable"
datosDiarios <- dbGetQuery(con,sql)
estaciones <- unique(datosDiarios$diaestacion)
maximos_diarios <- NULL
for(i in 1:length(estaciones)) {
datos_diarios_estacion <- datosDiarios %>% filter(diaestacion==estaciones[i])
years = unique(datos_diarios_estacion$yyyy)
for(j in 1:length(years))
{
datos_diarios_estacion_yyyy = datos_diarios_estacion %>% filter(yyyy==years[j])
if(is.null(maximos_diarios)){
maximos_diarios <- datos_diarios_estacion_yyyy[which.max(datos_diarios_estacion_yyyy$diavalor),]
} else {
maximos_diarios <- rbind(maximos_diarios,datos_diarios_estacion_yyyy[which.max(datos_diarios_estacion_yyyy$diavalor),])
}
}
}
saveRDS(datosDiarios,'data/datosDiarios.rds')
saveRDS(maximos_diarios,'data/maximos_diarios.rds')
runApp()
library(RPostgreSQL)
library(postGIStools)
setwd('/Users/emartinez/Desktop/Hidroclima/dashboard_bdcac/')
con <- dbConnect(PostgreSQL(), dbname = "bdcac", user = "desarrollador",
host = "localhost", port = "9003",
password = "desbdcac")
# ESTACIONES
estaciones <- dbGetQuery(con,"select a.*, b.* from bdcac.estacion a inner join bdcac.institucion b on a.estinstitucion = b.inscodigo
where a.estcodigobdcac in (select distinct diaestacion from bdcac.datodia where diaestacion !=11111111) and b.inscodigo != 1
order by b.inspais, a.estcodigobdcac")
saveRDS(estaciones, file = "data/estaciones.rds")
estacionesWeb <- estaciones
saveRDS(estacionesWeb, file = "data/estacionesWeb.rds")
runApp()
